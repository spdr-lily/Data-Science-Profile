# -*- coding: utf-8 -*-
"""PLN_chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12mGCqTA2DonlSQ6X32LUq-dWWtYRFhny

# Processamento de Linguagem Natural
Aplicações de PLN em Chatbots e Assistentes Virtuais
"""

import random
from getpass import getpass

clientes = {
    "1": {
        "saldo": 500.00,
        "nome": "João da Silva",
        "senha": "senhadojoão"
    },
    "2": {
        "saldo": 900.00,
        "nome": "Maria Joaquina",
        "senha": "senhadamaria"
    }
}

def inicio():
    boasvindas = [
        "Olá! Bem vindo ao MeuBanco. O que você deseja fazer hoje?",
        "Bem vindo!"
    ]

    opcoes = [
        ["1 - Entrar na minha conta", login],
        ["2 - Criar uma conta", criar_conta],
        ["3 - Encerrar conversa", encerrar_chat]
    ]

    print("\n" + random.choice(boasvindas))
    for opcao in opcoes:
        print(opcao[0])
    escolha = input("Escolha um número: ")
    opcoes[int(escolha)-1][1]()

def criar_conta():
    print("\nNão estamos aceitando novos pedidos de conta no momento. Avisaremos quando abrirmos novamente para novos pedidos!")

def login():
    cliente = input("\nQual seu CPF? ").replace(".", "").replace("-", "")

    # Verificação deveria ser via API
    if not cliente in clientes:
        print("\nCliente não identificado.")
        inicio()
    senha = getpass("\nQual sua senha? ")

    # Verificação deveria ser via API
    if senha == clientes[cliente]['senha']:
        print("\nCliente autenticado com sucesso.")
        logado(clientes[cliente])
    else:
        print("\nSenha incorreta, tente novamente.")
        inicio()

def logado(cliente):
    print(f"\nOlá, {cliente['nome']}. Seu saldo atual é de R${cliente['saldo']}. O que gostaria de fazer?")

    opcoes = [
        ["1 - Fazer uma transferência", transferir],
        ["2 - Encerrar conversa", encerrar_chat]
    ]

    for opcao in opcoes:
        print(opcao[0])
    escolha = input("Escolha um número: ")

    opcoes[int(escolha)-1][1](cliente)

def transferir(cliente):
    valor = float(input("\nQuanto gostaria de transferir? R$ "))
    destinatario = input(f"\nDigite o CPF de quem irá receber R${valor}: ")

    # Verificação deveria ser via API
    nome_destinatario = clientes[destinatario]['nome']

    certeza = input(f"\nTem certeza de que deseja enviar R${valor} para {nome_destinatario}? (sim ou não): ")
    if certeza.lower().strip() == "sim":
        # Operação deveria ser via API
        cliente["saldo"] -= valor
        clientes[destinatario]['saldo'] += valor

        print("\nTransferência realizada com sucesso!")
        logado(cliente)
    else:
        logado(cliente)

def encerrar_chat(cliente=None):
    encerramento = [
        "Até mais!",
        "Volte sempre.",
        "Espero que tenha gostado dos nossos serviços, tchau!"
    ]

    print("\n" + random.choice(encerramento))
    return

inicio()

"""# Desenvolvimento de um chatbot com análise de sentimentos em Python"""

from transformers import pipeline

classificador = pipeline(
    model="lxyuan/distilbert-base-multilingual-cased-sentiments-student",
)

! pip3 install wikipedia
import wikipedia
wikipedia.set_lang("pt")

def inicio():
    pergunta = input("Me pergunte qualquer coisa:\n")
    resultados = wikipedia.search(pergunta)
    melhor_resultado = resultados[0]
    texto = wikipedia.page(melhor_resultado)
    print("\n" + texto.summary)
    print(f"\nFonte: {melhor_resultado} - Wikipedia")
    feedback = input("\nO que achou da resposta?\n")
    sentimento = classificador(feedback)

    respostas = [
        "Fico feliz que tenha gostado da resposta!",
        "Obrigado pelo feedback, volte sempre.",
        "Que pena que não gostou da resposta. Gostaria de tentar uma outra pergunta?"
    ]

    if sentimento[0]['label'] == "positive" and sentimento[0]['score'] > 0.6:
        print("\n" + respostas[0])
    elif sentimento[0]['label'] == "negative" and sentimento[0]['score'] > 0.6:
        print("\n" + respostas[2])
    else:
        print("\n" + respostas[1])

    return sentimento

inicio()

